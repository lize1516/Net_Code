#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<arpa/inet.h>
#include<pthread.h>
#include<fcntl.h>
#include<unistd.h>
#include<sys/sendfile.h>
#include<sys/stat.h>

//chown root:root name


#define MAX 1024
#define HOME_PAGE "index.html"

int get_line(int sock,char*line,int size)
{
    char ch='c';
    int i=0;
    while(i<size-1&&ch!='\n')
    {
       int s= recv(sock,&ch,1,0);
       if(s>0)
       {
            if(ch=='\r')
            {
                recv(sock,&ch,1,MSG_PEEK);
                if(ch=='\n')
                    recv(sock,&ch,1,0);
                else
                     ch='\n';
            }
            line[i++]=ch;
       }
       else
           break;
    }
    line[i]='\0';
    return i;
}

void clear_header(int sock)
{
    char line[MAX];
    do{
        get_line(sock,line,MAX);
    }while(strcmp(line,"\n"));
}

int echo_www(int sock,char* path,int size)    //GET   wucan
{
    clear_header(sock);   
    int fd=open(path,O_RDONLY);
    if(fd<0)
        return 404;
    
    char line[MAX];
    sprintf(line,"HTTP/1.0 200 OK\r\n");
    send(sock,line,strlen(line),0);
    sprintf(line,"Content-Type:text/html;charset=WIN-8890-1\r\n");
    send(sock,line,strlen(line),0);
    sprintf(line,"\r\n");
    send(sock,line,strlen(line),0);

    sendfile(sock,fd,NULL,size);        //sendfile
    return 200;
}
void echo_error(int code)
{
    switch(code)
    {
        case 404:
           break;
        case 501:
           break;
        case 503:
           break;
        default:
           break; 

    }

}

int exe_cgi(int sock,char path[],char method[],char* query_string)
{
    char line[MAX];
    char method_env[MAX];
    char query_string_env[MAX];
    char content_length_env[MAX/8];
    int content_length=0;
    if(strcasecmp(method,"GET")==0)
    {
        clear_header(sock);

    }
    else
    {   //POST方法
        do{
            get_line(sock,line,MAX);
            if(strncmp(line,"Content-Length: ",16)==0)
            {
                content_length=atoi(line+16);
            }
        }while(strcmp(line,"\n"));
        if(content_length==-1)
        {
            return 404;
        }
    }

    int input[2];
    int output[2];

    pipe(input);
    pipe(output);

    //GET[path,query_string],  POST[path,sontent_length]
    pid_t id=fork();
    if(id<0)
    {
        return 404;
    }
    else if(id==0)
    {
        //child
        //传参 method  GET[query_string]  POST[content_length]
        //用环境变量传参   环境变量可以被子进程继承   环境变量不会被替换
        
        close(input[1]);     //关闭写端
        close(output[0]);

        dup2(input[0],0);  //重定向
        dup2(output[1],1);

        sprintf(method_env,"METHOD=%s",method);
        putenv(method_env);
        if(strcasecmp(method,"GET"==0))
        {
            sprintf(query_string_env,"QUERY_STRING=%s",query_string);
            putenv(query_string_env);
        }
        else
        {
            //POST
            sprintf(content_length_env,"CONTENT_LENTGTH=%d",content_length);
            putenv(content_length_env);
        }

        execl(path,path,NULL);    //path 路径   path执行方式  NULL
        exit(1);
    }
    else 
    {
        close(input[0]);   //关闭读端
        close(output[1]);
        char ch='c';

        if(strcasecmp(method,"POST")==0)
        {
            int i=0;
            for(;i<content_length;i++)
            {
                recv(sock,&ch,1,0);
                write(input[1],&ch,1);
            }
        }

        sprintf(line,"HTTP/1.0 200 OK\r\n");
        send(sock,line,strlen(line),0);
        sprintf(line,"Content-Type:text/html;charset=WIN-8890-1\r\n");
        send(sock,line,strlen(line),0);
        sprintf(line,"\r\n");
        send(sock,line,strlen(line),0);
    
        while(read(output[0],&ch,1)>0)       //读到文件结尾时，返回值为0
        {
            send(sock,&ch,1,0);
        }

        waitpid(id,NULL,0);

        close(input[1]);
        close(output[0]);
    }
}

void* handler(void* argc)
{
    int sock=(int)argc;
    char line[MAX];
    char method[MAX/32];
    char url[MAX];
    char path[MAX];
    int errCode=0;
    int cgi=0;
    char * query_string=NULL;


#ifdef Debug
    do{ 
         get_line(sock,line,MAX);
        printf("%s",line);

    }while(strcmp(line,"\n"));
#else
    get_line(sock,line,sizeof(line));
    int i=0;
    int j=0;
    while(i<sizeof(method)-1&&j<sizeof(line)&&!isspace(line[j]))
    {
        method[i]=line[j];   
        i++,j++;
    }
    method[i]='\0';

    if(strcasecmp(method,"GET")==0)
    {
        
    }
    else if(strcasecmp(method,"POST")==0)
    {
        cgi=1;
    
    }        
    else
    {
        errCode=404;
        goto end;
    }

    while(j<sizeof(line)&&isspace(line[j]))
    {
        j++;
    }
    i=0;
    while(i<sizeof(url)-1&&j<sizeof(line)&&!isspace(line[j]))
    {
        url[i]=line[j];
        i++,j++;
    }
    url[i]='\0';
    
    //
    if(strcasecmp(method,"GET")==0)
    {
        query_string=url;
        while(*query_string)
        {
            if(*query_string=='?')
            {
                *query_string='\0';
                query_string++;
                cgi=1;
                break;
            }
            query_string++;
        }
    }
    //url  ---->path
    sprintf(path,"wwwroot%s",url);
    if(path[strlen(path)-1]=='/')
    {
        strcat(path,HOME_PAGE);
    }

    //stat ---
    struct stat st;
    if(stat(path,&st)<0)
    {
        errCode=404;
        goto end;
    }
    else
    {
        if(S_ISDIR(st.st_mode))
        {
            strcat(path,HOME_PAGE);
        }
        else if((st.st_mode&S_IXUSR)||\
            (st.st_mode&S_IXGRP)||\
                (st.st_mode&S_IXOTH))
        {
            cgi=1;
        }
        else
        {
            
        }
        if (cgi)
        {
            exe_cgi(sock,path,method,query_string);

        }
        else
        {  //path
            errCode=echo_www(sock,path,st.st_size);
        }
    }

#endif
end:
    if(errCode!=200)
    {
        echo_error(errCode);
    }
    close(sock);
}




int startup(int port)
{
    int sock=socket(AF_INET,SOCK_STREAM,0);
    if(sock<0)
    {
        perror("socket");
        exit(2);
    }

    int opt=1;
    setsockopt(sock,SOL_SOCKET,SO_REUSEADDR,&opt,sizeof(opt));

    struct sockaddr_in socket;
    socket.sin_family=AF_INET;
    socket.sin_addr.s_addr=htonl(INADDR_ANY);
    socket.sin_port=htons(port);

    if(bind(sock,(struct sockaddr*)&socket,sizeof(socket))<0)
    {
        perror("bind");
        exit(3);
    }
    if(listen(sock,5)<0)
    {
        perror("listen");
        exit(4);
    }
   printf("nihao\n"); 
    return sock;
}

int main(int argc,char* argv[])
{
    if(argc!=2)
    {
        printf("Usage: \n\t%s [port]\n",argv[0]);
        return 1;
    }
    int listen_sock=startup(atoi(argv[1]));
    
    for(;;)
    {
        struct sockaddr_in client;
        socklen_t len=sizeof(client);
        int client_sock=accept(listen_sock,(struct sockaddr*)&client,&len);
        if(client_sock<0)
        {
            perror("accept");
            continue;
        }
        
        pthread_t tid;
        pthread_create(&tid,NULL,handler,(void*)client_sock);
        pthread_detach(tid);

    }    


}
