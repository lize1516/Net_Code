#include<stdio.h>
#include<unistd.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<arpa/inet.h>
#include<poll.h>
#include<stdlib.h>
#include<string.h>
#include<fcntl.h>

int startup(char* port)
{
    struct sockaddr_in addr;
    addr.sin_family=AF_INET;
    addr.sin_addr.s_addr=htonl(INADDR_ANY);
    addr.sin_port=htons(atoi(port));

    int listen_sock=socket(AF_INET,SOCK_STREAM,0);
    if(listen_sock<0)
    {
        perror("socket");
        return -1;
    }
    if(bind(listen_sock,(struct sockaddr*)&addr,sizeof(addr))<0)
    {
        perror("bind");
        return -2;
    }
    if(listen(listen_sock,5)<0)
    {
        perror("listen");
        return -3;
    }

    return listen_sock;
}

void Init(struct pollfd* fd_list,int size)
{
    int i=0;
    for(i=0;i<size;i++)
    {
        fd_list[i].fd=-1;
        fd_list[i].events=0;
        fd_list[i].revents=0;
    }
}

void Add(int fd,struct pollfd* fd_list,int size)
{
    int i=0;
    for(i=0;i<size;i++)
    {
        if(fd_list[i].fd==-1)
        {
            fd_list[i].fd=fd;
            fd_list[i].events=POLLIN;
            break;
        }
    }
}

void ServiceFun(int listen_sock,struct pollfd* fd_list,int size)
{   
   // int file=open("client.txt",O_RDONLY);
    int i=0;
    for(i=0;i<size;i++)
    {
        if(fd_list[i].fd==-1)
            continue;
        if(!(fd_list[i].revents&POLLIN))
            continue;
        if(fd_list[i].fd==listen_sock)
        {
            struct sockaddr_in client_addr;
            socklen_t len=sizeof(client_addr);
            int connect=accept(listen_sock,(struct sockaddr*)&client_addr,&len);
            if(connect<0)
            {
                perror("accept");
                continue;
            }
            Add(connect,fd_list,size);
        }
       /* else
        {
            while(!feof(file))
            {
                char buf[1024]={0};
                int ret=read(file,buf,sizeof(buf)-1);
                if(strlen(buf)<1023)
                {
                    printf("%s",buf);
                    write(fd_list[i].fd,buf,strlen(buf));
                    printf("quit!");
                    break;
                }
                printf("%s",buf);
                write(fd_list[i].fd,buf,strlen(buf));
            }
        
        }*/
       else
        {
            char buf[1024]={0};
            int ret=read(fd_list[i].fd,buf,sizeof(buf)-1);
            //int ret=read(file,buf,sizeof(buf)-1);
            if(ret<0)
            {
                perror("read");
                continue;
            }
            if(ret==0)
            {
                printf("close client!\n");
                close(fd_list[i].fd);
                fd_list[i].fd=-1;
            }
            if(buf[0]!='\0')
            {
                printf("client >:%s",buf);
                write(fd_list[i].fd,buf,strlen(buf));
            }
        }
    }
}

int main(int argc,char* argv[])
{
    if(argc!=2)
    {
        perror("Usage: ./server [port]\n");
        return 1;
    }
    int sock=startup(argv[1]);
    if(sock<0)
    {
        printf("startup");
        return 2;
    }
    
   struct pollfd fd_list[1024];
    int size=sizeof(fd_list)/sizeof(struct pollfd);
    Init(fd_list,size);
    Add(sock,fd_list,size);
    for(;;)
    {
        int ret=poll(fd_list,size,3000);
        if(ret<0)
        {
            perror("poll");
            continue;
        }
        if(ret==0)
        {
            printf("poll timeout\n");
            continue;
        }
        ServiceFun(sock,fd_list,size);
    }

    return 0;
}
